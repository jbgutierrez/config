" General settings{{{
" load pathogen managed plugins{{{
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()"}}}
" general{{{
set nocompatible        " Use Vim defaults (much better!)
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set virtualedit=all     "allows the cursor to freely roam anywhere it likes in command mode
set viminfo='20,\"50    " read/write a .viminfo file, don't store more
                        " than 50 lines of registers
set history=50          " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set number              " show line numbers
set scrolloff=3         " leave 3 lines of breathing room
set title               " show title
set hidden              " allows changing of buffers without saving
set lazyredraw          " Set lazydraws so that rendering is much faster during macros
set showmode            " I like to know which mode I am in at times
set showcmd             " show the command being typed
set showmatch           " show matching brackets
set nolist              " show whitespace
set listchars=tab:▸\ ,eol:¬  "use the same symbols as TextMate for tabstops and EOLs
set hidden
" set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set statusline=%<%f\ %h%m%r%=%{\"[\".(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\").\"]\ \"}%k\ %-14.(%l,%c%V%)\ %P
set laststatus=2        " always show the last status
set wildmenu            " turn on command line completion wild style"}}}
" tabs and indentation{{{
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smartindent    " use smart indentation over autoindent
set smarttab       " smart tabulatin and backspace
set expandtab      " To spaces to tabs 'set noexpandtab' and ':retab!'
"}}}
" searches{{{
" set gdefault           " global search/replace by default
set incsearch hlsearch " highlight matches as you type
set smartcase          " override ignorecase when there are uppercase characters
set ignorecase         " ignore case when searching "}}}
" wraping{{{
set nowrap                   " don't wrap lines
set listchars+=extends:»     " show a » when a line goes off the right edge of the screen
set listchars+=precedes:«    " show a « when a line goes off the left edge of the screen
set linebreak                " when wrapping, try to break at characters in breakat
set breakat=\ ^I!@*-+;:,./?  " when wrapping, break at these characters
set showbreak=>              " character to show that a line is wrapped"}}}
" encoding and fileformat{{{
autocmd BufRead * silent! %s/^M$// " never see ^M again! (DOS text files)
set enc=utf-8 nobomb
" set fileformat=dos               " alternative configuration for the DOS text files
" set enc=iso-8859-1"}}}
" spell checking{{{
set spell spelllang=es " X + = to show suggestions
set spellsuggest=5"}}}
" load personal functions{{{
:so $VIMHOME/personal/abbreviations.vim
:so $VIMHOME/personal/csharp_folding.vim
:so $VIMHOME/personal/functions.vim"}}}
" file backups{{{
set nobackup                                        " Don't make a backup before overwriting a file.
set nowritebackup                                   " And again.
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp " Store temporary files in a central spot
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp"}}}
" UI settings{{{

"improve autocomplete menu color
"gui options
set guifont=Monaco:h12.00
set guioptions-=T
set guioptions-=r
set guioptions-=R
set guioptions-=l
set guioptions-=R
au ColorScheme * hi Pmenu ctermbg=238 gui=bold
au ColorScheme * hi Folded guibg=#292421
au ColorScheme * hi IncSearch gui=underline guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE
au ColorScheme * hi Search gui=underline guifg=NONE guibg=NONE ctermfg=NONE ctermbg=NONE
colorscheme sunburst
"Invisible character colors
set cursorline " highlight current line
set cursorcolumn
set clipboard+=unnamed "accessing the system clipboard"}}}
" mswin settings{{{
if has('win32')
  source $VIMRUNTIME/mswin.vim
  behave mswin
  set shell=c:\\cygwin\\bin\\zsh.exe shellcmdflag=-c shellxquote=\"
  set ffs=dos
endif"}}} "}}}

" Coding settings{{{
" general{{{
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
compiler ruby         " Enable compiler support for ruby
" Auto save folds
" au BufWinLeave * mkview
" au BufWinEnter * silent loadview"}}}
" folding{{{
set foldlevel=1
set foldmethod=syntax
set fillchars=fold:\ "
set foldtext=MyFoldText() " Custom fold text function
" set balloonexpr=FoldSpellBalloon()
set ballooneval"}}}
" javascript{{{
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS"}}}
" .vimrc{{{
au BufWritePost .vimrc source % " When vimrc is edited, reload it
au BufRead,BufWritePost .vimrc set foldmethod=marker"}}}
" ruby{{{
au FileType ruby,eruby set omnifunc=rubycomplete#Complete
au FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
au FileType ruby,eruby let g:rubycomplete_rails = 1
au FileType ruby,eruby let g:rubycomplete_classes_in_global = 1"}}}
" XML{{{
au FileType html set omnifunc=htmlcomplete#CompleteTags
au FileType xml set omnifunc=xmlcomplete#CompleteTags
au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax"}}}
" haml{{{
au! BufRead,BufNewFile *.haml setfiletype haml"}}}
" css{{{
au FileType css setlocal foldmethod=marker
au FileType css setlocal foldmarker={,}
au FileType css set omnifunc=csscomplete#CompleteCSS"}}}
" diff{{{
au FileType diff setlocal fdm=expr
au FileType diff setlocal fde=DiffFoldLevel()
au FileType diff setlocal fdc=1
au FileType diff setlocal foldlevel=0"}}}
" file types really do require explicit tabs, and not spaces{{{
au FileType make   setlocal noexpandtab
au FileType python setlocal noexpandtab"}}}
" load templates{{{
au BufNewFile * silent! 0r $VIMHOME/personal/%:e.tpl"}}}"}}}

" Key mappings{{{
" general{{{
let mapleader = ","
map <s-u> :redo<CR>           " redo
nmap <leader>l :set list!<CR> " shortcut to rapidly toggle `set list` (retab! if neccesary)
map <leader>e :e ~/.vimrc<cr> " fast editing of the .vimrc "}}}
" moving around split windows{{{
nmap <s-down>   <c-w>w
nmap <s-up>     <c-w>W
nmap <s-left>   <c-w>h
nmap <s-right>  <c-w>l"}}}
" easies taglist navigation{{{
nmap <buffer> <F7> <C-]>
nmap <buffer> <S-F7> <C-T>
nmap <buffer> <A-F7> :ptselect<cr>
nmap <buffer> <F8> :tnext<cr>
nmap <buffer> <C-F8> :tprev<cr>"}}}
" function keys{{{
map <F2> :TlistToggle<CR>                               " F2 - List methods
map <F4> :set hlsearch! hlsearch?<CR>                   " F4 - highlighting on/off
map <F6> :call ToggleScratch()<CR>                      " F6 - Toggle scratch buffer
set textwidth=80
nmap <F10> gqap                                         " F10 - Format paragraph
imap <F11> <ESC>1G=Ga                                   " F11 - Format code
nnoremap <F11> :call CleanFile()<CR>                    " delete empty lines
map <F12> :%!tidy -q --tidy-mark 0 2>/dev/null<CR>"}}}
" move text around{{{
nmap <S-Tab> <<
nmap <Tab> >>
vmap <S-Tab> <gv
vmap <Tab> >gv
nmap <C-j> :m+<CR>==
nmap <C-k> :m-2<CR>==
imap <C-j> <Esc>:m+<CR>==gi
imap <C-k> <Esc>:m-2<CR>==gi
vmap <C-j> :m'>+<CR>gv=gv
vmap <C-k> :m-2<CR>gv=gv"}}}
" shortcuts for rails commands{{{
" map <leader>m :rmodel
" map <leader>c :rcontroller
" map <leader>v :rview
" map <leader>u :runittest
" map <leader>f :rfunctionaltest
" map <leader>tm :rtmodel
" map <leader>tc :rtcontroller
" map <leader>tv :rtview
" map <leader>tu :rtunittest
" map <leader>tf :rtfunctionaltest
" map <leader>sm :rsmodel
" map <leader>sc :rscontroller
" map <leader>sv :rsview
" map <leader>su :rsunittest
" map <leader>sf :rsfunctionaltest"}}}
" folding{{{
nnoremap <space> za    " space - toggle current fold
nnoremap <s-space> @=((foldclosed('.') == -1) ? 'za' : 'zA')<CR> " space - toggle current fold"}}}
" coding utilities {{{
map <d-r> <plug>rubyfilerun    " run file in shell mode with ruby
map <leader>, V} :Align\|<cr>  " align tables
map <leader>= V} <Plug>AM_t=|  " align assignments
map <leader>c gcc              " toggle comment "}}}
" change colors{{{
map <leader><f3> :nextcolor<cr>
map <leader><f2> :prevcolor<cr>"}}}
" replace selected text{{{
nmap <c-r> yiw:%s/<c-r>"//gc<left><left><left>
vmap <c-r> y:%s/<c-r>"//gc<left><left><left>
nmap s diw"0P
vmap s "_d"0P"}}}
" save file{{{
:map <C-s> :w<cr>
:map <C-S-s> :browse confirm saveas<cr>"}}}
" vim defaults overriden{{{
nmap x "_dl"}}}
" make search results appear in the middle of the screen{{{
nmap n nzz
nmap N Nzz
nmap * *zz
nmap # #zz
nmap g* g*zz
nmap g# g#zz"}}}"}}}

" plugins settings{{{
" MiniBufExp{{{
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1 "}}}
" Tag List{{{
let Tlist_Show_Menu=1
let Tlist_GainFocus_On_ToggleOpen=1
let Tlist_Close_OnSelect=1
let Tlist_Compact_Format=1"}}}
" ToogleScratch{{{
function! ToggleScratch()
  if expand('%') == g:ScratchBufferName
    quit
  else
    Sscratch
  endif
endfunction"}}}
" Ack{{{
set grepprg=ack
set grepformat=%f:%l:%m"}}}
" Command-T{{{
set wildignore+=*.jpg,*.xls,*.doc,*.cd
let g:CommandTMaxHeight=10"}}}
