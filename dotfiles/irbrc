libs =
  [ 'rubygems'       ,
    'wirble'         , # IRB tools, tricks, and techniques (requires 'pp', 'irb/completion' and 'rubygems')
    'pp'             , # Pretty Print method
    'ap'             , # Awesome Print (gem install awesome_print)
    'irb/completion' , # Tab Completion
    'map_by_method'  , # Dr Nic's gems
    'what_methods'   , # Dr Nic's gems
    'net-http-spy'   , # Print information about any HTTP requests being made
    'hirb'           ] # Pretty tables

libs.each do |lib|
  begin
    require lib
  rescue LoadError => err
    $stderr.puts "Couldn't load #{lib}: #{err}"
  end
end

# Prompt behavior
IRB.conf[:AUTO_INDENT] = true
IRB.conf[:PROMPT_MODE] = :SIMPLE

# Save History between irb sessions
require 'irb/ext/save-history'
IRB.conf[:SAVE_HISTORY] = 100
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb-save-history"

# Wirble.init
# Wirble.colorize

# RAILS specific
railsrc_path = File.expand_path('~/.railsrc')
if ( ENV['RAILS_ENV'] || defined? Rails ) && File.exist?( railsrc_path )
  begin
    load railsrc_path
  rescue Exception => e
    warn "Could not load: #{ railsrc_path }" # because of $!.message
    warn e.message
    pp e.backtrace
  end
end

# CORE extensions
class Object

  #methods defined in the parent class of the object
  def local_methods
    (methods - Object.instance_methods).sort
  end

  def cls
    system 'clear'
    message = ENV['RAILS_ENV'] || "no environment"
    return message
  end

  def eigenclass
    class << self; self; end
  end

  def class_methods
    (methods - Class.instance_methods - Object.methods).sort
  end

  def local_methods
    (methods - Object.instance_methods).sort
  end

  def copy(str)
    IO.popen('xclip -i', 'w') { |f| f << str.to_s }
  end

  def paste
    `xclip -o`
  end

end

class Class

  def class_methods
    (methods - Class.instance_methods - Object.methods).sort
  end

  #Returns an array of methods defined in the class, class methods and instance methods
  def defined_methods
    methods = {}
    methods[:instance] = new.local_methods
    methods[:class] = class_methods
    methods
  end

  def metaclass
    eigenclass
  end

end

puts ".irbrc loaded successfully"
