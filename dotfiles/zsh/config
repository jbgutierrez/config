autoload -U colors; colors
setopt prompt_subst
# set some colors
for COLOR in RED GREEN YELLOW MAGENTA; do
  eval PR_$COLOR='%{$fg[${(L)COLOR}]%}'        
  eval PR_BRIGHT_$COLOR='%{$fg_bold[${(L)COLOR}]%}'
done
PR_RESET="%{${reset_color}%}";  

refresh_git_status() {
  unstaged=FALSE staged=FALSE stashed=FALSE
  if [[ $(git diff --cached --name-status 2>/dev/null ) != "" ]]; then
    staged=TRUE
  fi
  if [[ $(git diff --name-status 2>/dev/null ) != "" ]]; then
    unstaged=TRUE
  fi
  if [[ $(git stash list) != "" ]]; then
    stashed=TRUE
  fi
}

git_info() {
  branch_name=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [[ ${branch_name} != "" ]]; then
    refresh_git_status
    status_color=${PR_GREEN}
    if ${staged}; then
      status_color=${PR_YELLOW}
      if ${unstaged}; then
        branch_name+=${PR_RED}' + unstaged data'
      fi
    elif ${unstaged}; then
      status_color=${PR_RED}
    fi
    if ${stashed}; then
      branch_name+=${PR_RED}' + stashed commit'
    fi
    echo "${status_color}[${branch_name}${status_color}] "
  fi
}

git_log() {
  git log --pretty=format:"%h - %ar : %s" -n 1 2> /dev/null
}

PROMPT='${PR_MAGENTA}$(date +%H:%M) %~ $(git_info)${PR_RESET}
â†’ '
RPROMPT='%U${PR_WHITE}$(git_log)%u${PR_RESET}'
#############################
# Other Options

# setopt PRINT_EXIT_VALUE

setopt CORRECT
setopt CORRECTALL

setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
setopt HIST_IGNORE_SPACE
setopt APPEND_HISTORY # write history only when closing
setopt EXTENDED_HISTORY # add more info
setopt extended_glob
# Other tabbing options
# setopt NO_AUTO_MENU
# setopt BASH_AUTO_LIST

#############################
# Variables

# Quote pasted URLs
autoload url-quote-magic
zle -N self-insert url-quote-magic

HISTFILE=~/.zsh_history
SAVEHIST=10000
HISTSIZE=10000

REPORTTIME=10 # Show elapsed time if command took more than X seconds
LISTMAX=0 # ask to complete if top of list would scroll off screen

# Load completions for Ruby, Git, etc.
autoload compinit
compinit

# Make CTRL-W delete after other chars, not just spaces
WORDCHARS=${WORDCHARS//[&=\/;\!#%\{]}

bindkey -e

