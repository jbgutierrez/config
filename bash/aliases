# Utility
alias reload='source ~/.bash/aliases'
alias vim='nvim'
alias vimun='nvim -u NONE -N'
alias ea='nvim -f ~/.bash/aliases && reload' # Edit aliases
alias ee='nvim ~/.bash/env'
topcommands() {
  history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}
alias startmongo='mongod --config /usr/local/etc/mongod.conf'

# GIT aliases
alias gk='gitk --all 2>/dev/null&'
alias gkr='gitk --all `git reflog | cut -c1-7` 2>/dev/null&'
alias gks='git instaweb'
alias gst='git status -s --ignore-submodules=dirty'
alias gl='git pull'
alias gp='git push'
alias gd='git diff --ignore-submodules=dirty --ignore-space-change'
alias gdc='git diff --ignore-submodules=dirty --ignore-space-change --cached'
alias gc='git commit -v'
alias gca='git commit -v -a'
alias gcsvn='git svn dcommit'
alias glsvn='git svn fetch && git rebase git-svn'
alias ga='git commit -v --amend'
alias gaa='git commit -v -a --amend'
alias gadd='git add -i'
alias gb='git branch --color'
alias gbd='git branch -d'
go() {
  git checkout -b $1 2> /dev/null || git checkout $1
}
alias glog='git log --oneline --decorate --graph --all'
alias gapply='git stash apply && git stash clear'
alias gresolve='git add -u && git rebase --continue'
alias glmodules='git submodule foreach "(git checkout master; git pull)"'
alias gcontributors='git shortlog -s -n'

md2pdf() {
  base=${1/.md/}
  pandoc $base.md -s --highlight-style tango -o $base.pdf --toc && open $base.pdf
}

# npm aliases
alias n="npm install && npm shrinkwrap"
alias ng="npm list -g --depth=0 2>/dev/null"
alias nl="npm list --depth=0 2>/dev/null"

garchive() {
  git archive master | bzip2 >source-tree.tar.bz2
}

# Git clone from GitHub
function gclone() {
  git clone git://github.com/$1/$2.git
}

#  http://ryan.mcgeary.org/2011/02/09/vendor-everything-still-applies/
alias b="bundle"
alias bi="b install --path vendor"
alias bu="b update"
alias be="b exec"
alias binit="bi && b package && echo 'vendor/ruby' >> .gitignore && rbenv local 1.9.3-p194"
alias tl='tail -f log/*.log'

#heroku helpers
alias hp="go heroku && git rebase master && git push heroku heroku:master --force && go master"
alias hl="heroku logs"

# Bash shortcuts
alias less='less -r'
alias la='ls -lhGta'
alias l='ls -lhGt'  # -l long listing, most recent first
                    # -G color

alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias df='df -h'
alias h='history'
alias md='mkdir -p'
cdh(){
  cd "$home/$1"
}
# Change working directory to the top-most Finder window location
cdfinder() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
alias c='clear'
alias ..='cd ..'   # up one dir
alias cd..='cd ..'   # up one dir
alias cdl='cd -'  # goto last dir cd'ed from
alias cdd='cd -'  # goto last dir cd'ed from
take() {
  mkdir -p "$1"
  cd "$1"
}
alias q='exit'
alias x='exit'

tre() {
  tree -aC -I '.git|node_modules|output|components|vendor|bower_components|.sass-cache' --dirsfirst "$@" | less -FRX;
}

# start/stop postgresql
alias postgres_start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias postgres_stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'

# curl for useragents
alias iecurl="curl -H \"User-Agent: Mozilla/5.0 (Windows; U; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)\""
alias ffcurl="curl -H \"User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.8) Gecko/2009032609 Firefox/3.0.0 (.NET CLR 3.5.30729)\""

# archive project folders
farchive() {
  for f in *; do
    if [[ $f =~ ^[0-9]{4}-.* ]]; then
      echo "Skipping "$f
    else
      date=`stat -f %SB -t %y%m $f`
      mv $f $date-$f
      command="mv $f $date-$f"
      echo $command
    fi;
  done
}

movie2gif() {
  base=${1/.mp4/}
  width=$2
  [ ! -z $width ] || {{ width=-1 }}
  ffmpeg -ss 00:00:00.000 -t 10 -i $base.mp4 -vf scale=$width:-1 -r 10 $base.gif
}

js2coffeeDir() {
  echo -n "Remove original js files [N]:"
  read remove_files
  for FILE in `find $1 -name "*.js" -type f -o -path './node_modules' -prune -o -path './components' -prune`
  do
      if [ -e $FILE ] ; then
          COFFEE=${FILE//.js/.coffee}

          echo "converting ${FILE} to ${COFFEE}"
          js2coffee "$FILE" > "$COFFEE"
          if  [[ $remove_files == 'Y' ]]; then
            rm -f $FILE
            echo "removing ${FILE}"
          fi
      else
          echo "File: {$1} does not exist!"
      fi
  done
}

# grep dictionary words
dict() {
  grep "$@" /usr/share/dict/words
}

# Shortcuts to each project folder
PROJECTS_FOLDER=$HOME/Projects
for project_path in $PROJECTS_FOLDER/*; do
  if [ -d $project_path ]; then
    subfolder=`echo $project_path | /usr/bin/sed 's/.*\///'`
    alias "cd$subfolder"="cd $project_path"
    alias "e$subfolder"="vim $project_path"
    alias "o$subfolder"="open $project_path"
    alias "s$subfolder"="subl $project_path"
    alias "t$subfolder"="tat $project_path"
  fi
done

# Remember path position
export REMEMBERME_PATH=$HOME
alias rememberme='export REMEMBERME_PATH=$PWD'
alias cdrememberme='cd "$REMEMBERME_PATH"'

# List folders size
dufolders() {
  du -h -g -d 1
}

# File compression
zipr() {
  zip -r $1.zip $1
}
zip2bzip() {
  cat $1 | gunzip | bzip2 !#:1:s/gz/bz2
}
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)        tar xjf $1        ;;
      *.tar.gz)         tar xzf $1        ;;
      *.bz2)            bunzip2 $1        ;;
      *.rar)            unrar x $1        ;;
      *.gz)             gunzip $1         ;;
      *.tar)            tar xf $1         ;;
      *.tbz2)           tar xjf $1        ;;
      *.tgz)            tar xzf $1        ;;
      *.zip)            unzip $1          ;;
      *.z)              uncompress $1     ;;
      *)                echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}



# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory
killnamed() {
  # Kills any process that matches a regexp passed to it
  ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs kill -9
}
psgrep() {
  if [ ! -z $1 ] ; then
    echo "Grepping for processes matching $1..."
    ps aux | grep $1 | grep -v grep
  else
    echo "!! Need name to grep for"
  fi
}
psport() {
  sudo lsof -i :$1
}

# `o` with no arguments opens the current directory in Finder, otherwise opens
# the given location
o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `e` with no arguments opens the current directory in Vim, otherwise
# opens the given location
e() {
  if [ $# -eq 0 ]; then
    nvim .;
  else
    nvim "$@";
  fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
esubl() {
  if [ $# -eq 0 ]; then
    subl .;
  else
    subl "$@";
  fi;
}

alias ff='open -a Firefox'
alias chrome='open -a "Google Chrome"'
alias chrome-dev='open -a "Google Chrome" --args --js-flags="--expose-gc" --disable-extensions -incognito --always-enable-dev-tools --enable-precise-memory-info'

# Recursively Remove .DS_Store files in OS X
alias clean='find . -name *.DS_Store -type f -exec rm {} \;'

# Instant web sharing via webrick
webshare() {
  port=8080
  (( $1 )) && port=$1
  ruby -run -e httpd . --port $port --bind-address=0.0.0.0
}

# Social activity
tweet() {
  curl -u user:pass http://twitter.com/statuses/update.xml -d status="$*"
}

# Top man pages
function topmanpages() {
  echo "man 1 intro - a tutorial that gets you started with Linux if you have never used it.
man 2 syscalls - lists all Linux system calls by kernel version.
man 1 select_tut - select() system call tutorial.
man 3 string - lists all <string.h> string manipulation functions.
man 3 stdio - lists and describes all <stdio.h> standard input/output library functions.
man 3 errno - lists and describes all errno error numbers.
man 4 console_codes - Linux console escape and control sequences.
man 4 full - /dev/full - a device that simulates a full device.
man 5 proc - lots of info about the /proc filesystem.
man 5 filesystems - lists various Linux filesystems.
man 7 bootparam - a tutorial and reference of Linux kernel boot parameters.
man 7 charsets - a Linux programmer's view of character sets and internationalization.
man 7 glob - how pathname globbing works.
man 7 hier - description of the Linux file system hierarchy.
man 7 operator - C language operator precedence and associativity table.
man 7 regex - basic and extended regular expression overview.
man 7 suffixes - lists common Linux file suffixes and the associated file types.
man 7 time - overview of time and timers.
man 7 units - kilo, kibi, mega, mebi, giga, gibi, ... - decimal (SI) and binary system of units.
man 7 utf8 - description of UTF-8 encoding.
man 7 url - description of URIs, URLs and URNs."
}
